#include "detectorgenerator.h"
#include <sstream>

using namespace std;

extern string toBinary(int n, int digit);

string detectorGenerator(assertions asser, string &dec)
{
	string detector, id;
	stringstream ssid;
	ssid << asser.id;
	ssid >> id;
	dec.insert(dec.find("parameter"), "reg [1:0] tp");
	dec.insert(dec.find("parameter"), id);
	dec.insert(dec.find("parameter"), ",tn");
	dec.insert(dec.find("parameter"), id);
	dec.insert(dec.find("parameter"), "; //Generated by [ DETECTOR ]\n");
	dec.insert(dec.find("parameter"), "output reg z");
	dec.insert(dec.find("parameter"), id);
	dec.insert(dec.find("parameter"), "; //Generated by [ DETECTOR ]\n");
	dec.insert(dec.find("parameter"), "reg co");
	dec.insert(dec.find("parameter"), id);
	dec.insert(dec.find("parameter"), "; //Generated by [ DETECTOR ]\n");

	if(asser.response)
	{
		detector.append("always @(");
		detector.append(asser.resSignal);
		detector.append(" or tp");detector.append(id);detector.append(" or co");detector.append(id);detector.append(") begin\n");
		detector.append("    case (tp");detector.append(id);detector.append(")\n");
		detector.append("    2'b00: casex(co");detector.append(id);detector.append("&en");detector.append(id);detector.append(")\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b00; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b01: ");detector.append("if(~co");detector.append(id);detector.append(") begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=1;end\n");
		detector.append("        else casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b10; z");detector.append(id);detector.append("=~co");detector.append(id);detector.append(";end\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=~co");detector.append(id);detector.append(";end\n");
		detector.append("        endcase\n");
		detector.append("    2'b10: ");detector.append("if(~co");detector.append(id);detector.append(") begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=1;end\n");
		detector.append("        else casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b10; z");detector.append(id);detector.append("=~co");detector.append(id);detector.append(";end\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b11; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b11: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b11; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b11; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        endcase\n");
		detector.append("    endcase\n");
		detector.append("end\n");
	}
	else
	{
		detector.append("always @(");
		detector.append(asser.resSignal);
		detector.append(" or tp");detector.append(id);detector.append(" or co");detector.append(id);detector.append(") begin\n");
		detector.append("    case (tp");detector.append(id);detector.append(")\n");
		detector.append("    2'b00: casex(co");detector.append(id);detector.append("&en");detector.append(id);detector.append(")\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b00; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b01: ");detector.append("if(~co");detector.append(id);detector.append(") begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=1;end\n");
		detector.append("        else casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b10; z");detector.append(id);detector.append("=~co");detector.append(id);detector.append(";end\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=~co");detector.append(id);detector.append(";end\n");
		detector.append("        endcase\n");
		detector.append("    2'b10: ");detector.append("if(~co");detector.append(id);detector.append(") begin tn");detector.append(id);detector.append("=2'b01; z");detector.append(id);detector.append("=1;end\n");
		detector.append("        else casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b10; z");detector.append(id);detector.append("=~co");detector.append(id);detector.append(";end\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b11; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b11: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn");detector.append(id);detector.append("=2'b11; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        1'b1: begin tn");detector.append(id);detector.append("=2'b11; z");detector.append(id);detector.append("=0;end\n");
		detector.append("        endcase\n");
		detector.append("    endcase\n");
		detector.append("end\n\n");
	}

	return detector;
}
