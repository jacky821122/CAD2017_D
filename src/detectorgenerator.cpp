#include "detectorgenerator.h"

using namespace std;

extern string toBinary(int n, int digit);

string detectorGenerator(assertions asser, string &dec)
{
	string detector;
	dec.insert(dec.find("parameter"), "reg [1:0] tp,tn; //Generated by us\n");
	dec.insert(dec.find("parameter"), "output reg z; //Generated by us\n");
	dec.insert(dec.find("parameter"), "reg co; //Generated by us\n");

	if(asser.response)
	{
		detector.append("always @(");
		detector.append(asser.resSignal);
		detector.append(" or tp or co) begin\n");
		detector.append("    case (tp)\n");
		detector.append("    2'b00: casex(co&en)\n");
		detector.append("        1'b0: begin tn=2'b00; z=0;end\n");
		detector.append("        1'b1: begin tn=2'b01; z=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b01: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn=2'b10; z=~co;end\n");
		detector.append("        1'b1: begin tn=2'b01; z=~co;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b10: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn=2'b10; z=~co;end\n");
		detector.append("        1'b1: begin tn=2'b11; z=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b11: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn=2'b11; z=0;end\n");
		detector.append("        1'b1: begin tn=2'b11; z=0;end\n");
		detector.append("        endcase\n");
		detector.append("    endcase\n");
		detector.append("end\n");
	}
	else
	{
		detector.append("always @(");
		detector.append(asser.resSignal);
		detector.append(" or tp or co) begin\n");
		detector.append("    case (tp)\n");
		detector.append("    2'b00: casex(co&en)\n");
		detector.append("        1'b0: begin tn=2'b00; z=0;end\n");
		detector.append("        1'b1: begin tn=2'b01; z=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b01: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b1: begin tn=2'b10; z=~co;end\n");
		detector.append("        1'b0: begin tn=2'b01; z=~co;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b10: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b1: begin tn=2'b10; z=~co;end\n");
		detector.append("        1'b0: begin tn=2'b11; z=0;end\n");
		detector.append("        endcase\n");
		detector.append("    2'b11: casex(");
		detector.append(asser.resSignal);
		detector.append(")\n");
		detector.append("        1'b0: begin tn=2'b11; z=0;end\n");
		detector.append("        1'b1: begin tn=2'b11; z=0;end\n");
		detector.append("        endcase\n");
		detector.append("    endcase\n");
		detector.append("end\n");		
	}

	return detector;
}
