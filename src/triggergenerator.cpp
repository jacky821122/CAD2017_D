#include "triggergenerator.h"
#include <iostream>
#include <sstream>

using namespace std;

string triggerGenerator(assertions asser, string &dec)
{
	string trigger;
	string id;
	stringstream ssid;
	ssid << asser.id;
	ssid >> id;
	string sTriSig;
	sTriSig.append("tri_");
	sTriSig.append(id);
	dec.insert(dec.find("parameter"), "reg last_");
	dec.insert(dec.find("parameter"), sTriSig);
	dec.insert(dec.find("parameter"), ", en");
	dec.insert(dec.find("parameter"), id);
	dec.insert(dec.find("parameter"), ", en_n");
	dec.insert(dec.find("parameter"), id);
	dec.insert(dec.find("parameter"), "; //Generated by [ TRIGGER ]\n");
	
	// trigger.append("always @(posedge clk) begin\n");
	// trigger.append("    en");trigger.append(id);trigger.append(" <= en_n");trigger.append(id);trigger.append(";\n");
	// trigger.append("    last_");trigger.append(sTriSig);trigger.append(" <= ");trigger.append(asser.triSignal);trigger.append(";\n");
	// trigger.append("end\n");

	trigger.append("always @(posedge clk or posedge rst) begin\n");
	trigger.append("    if(rst) begin en");trigger.append(id);trigger.append(" <= 0; last_");trigger.append(sTriSig); trigger.append(" <= 0; end\n");
	trigger.append("    else begin\n");
	trigger.append("        en");trigger.append(id);trigger.append(" <= en_n");trigger.append(id);trigger.append(";\n");
	trigger.append("        last_");trigger.append(sTriSig);trigger.append(" <= ");trigger.append(asser.triSignal);trigger.append(";\n");
	trigger.append("    end\n");
	trigger.append("end\n");

	trigger.append("\n");
	trigger.append("assign en_n");
	trigger.append(id);
	trigger.append(" = en");
	trigger.append(id);
	if(asser.trigger) {trigger.append(" | ((~last_");trigger.append(sTriSig);trigger.append(" & ");trigger.append(asser.triSignal);trigger.append(") & PPI");trigger.append(id);trigger.append(");\n");}
	else {trigger.append(" | ((last_");trigger.append(sTriSig);trigger.append(" & ~");trigger.append(asser.triSignal);trigger.append(") & PPI");trigger.append(id);trigger.append(");\n");}
	trigger.append("\n");

	return trigger;
}
