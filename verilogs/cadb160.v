module fsm(clk, rst, PPI1, PPI2, PPI3, PPI4, PPI5, PPI6, PPI7, PPI8, PPI10, X, in);
input clk, rst;
input [6:0] in;
reg [6:0] out;
reg [6:0] pstate, nstate;
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p1, n1; //Generated by [ TRIGGER ]
reg en1; //Generated by [ TRIGGER ]
reg [2:0] count1; //Generated by [ COUNTER ]
input PPI1; //Generated by [ COUNTER ]
reg [1:0] tp1,tn1; //Generated by [ DETECTOR ]
reg z1; //Generated by [ DETECTOR ]
reg co1; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p2, n2; //Generated by [ TRIGGER ]
reg en2; //Generated by [ TRIGGER ]
reg [3:0] count2; //Generated by [ COUNTER ]
input PPI2; //Generated by [ COUNTER ]
reg [1:0] tp2,tn2; //Generated by [ DETECTOR ]
reg z2; //Generated by [ DETECTOR ]
reg co2; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p3, n3; //Generated by [ TRIGGER ]
reg en3; //Generated by [ TRIGGER ]
reg [5:0] count3; //Generated by [ COUNTER ]
input PPI3; //Generated by [ COUNTER ]
reg [1:0] tp3,tn3; //Generated by [ DETECTOR ]
reg z3; //Generated by [ DETECTOR ]
reg co3; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p4, n4; //Generated by [ TRIGGER ]
reg en4; //Generated by [ TRIGGER ]
reg [5:0] count4; //Generated by [ COUNTER ]
input PPI4; //Generated by [ COUNTER ]
reg [1:0] tp4,tn4; //Generated by [ DETECTOR ]
reg z4; //Generated by [ DETECTOR ]
reg co4; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p5, n5; //Generated by [ TRIGGER ]
reg en5; //Generated by [ TRIGGER ]
reg [2:0] count5; //Generated by [ COUNTER ]
input PPI5; //Generated by [ COUNTER ]
reg [1:0] tp5,tn5; //Generated by [ DETECTOR ]
reg z5; //Generated by [ DETECTOR ]
reg co5; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p6, n6; //Generated by [ TRIGGER ]
reg en6; //Generated by [ TRIGGER ]
reg [4:0] count6; //Generated by [ COUNTER ]
input PPI6; //Generated by [ COUNTER ]
reg [1:0] tp6,tn6; //Generated by [ DETECTOR ]
reg z6; //Generated by [ DETECTOR ]
reg co6; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p7, n7; //Generated by [ TRIGGER ]
reg en7; //Generated by [ TRIGGER ]
reg [3:0] count7; //Generated by [ COUNTER ]
input PPI7; //Generated by [ COUNTER ]
reg [1:0] tp7,tn7; //Generated by [ DETECTOR ]
reg z7; //Generated by [ DETECTOR ]
reg co7; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p8, n8; //Generated by [ TRIGGER ]
reg en8; //Generated by [ TRIGGER ]
reg [2:0] count8; //Generated by [ COUNTER ]
input PPI8; //Generated by [ COUNTER ]
reg [1:0] tp8,tn8; //Generated by [ DETECTOR ]
reg z8; //Generated by [ DETECTOR ]
reg co8; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg [1:0] p10, n10; //Generated by [ TRIGGER ]
reg en10; //Generated by [ TRIGGER ]
reg [3:0] count10; //Generated by [ COUNTER ]
input PPI10; //Generated by [ COUNTER ]
reg [1:0] tp10,tn10; //Generated by [ DETECTOR ]
reg z10; //Generated by [ DETECTOR ]
reg co10; //Generated by [ DETECTOR ]
reg r; //Generated by [ RESET ]
reg [1:0] rp, rn; //Generated by [ RESET ]
reg x1, x2, x3, x4, x5, x6, x7, x8, x10;
output X;
assign X = x1&x2&x3&x4&x5&x6&x7&x8&x10;
always @(*) begin
    if(z1==1) x1=1;
    else x1=0;
    if(z2==1) x2=1;
    else x2=0;
    if(z3==1) x3=1;
    else x3=0;
    if(z4==1) x4=1;
    else x4=0;
    if(z5==1) x5=1;
    else x5=0;
    if(z6==1) x6=1;
    else x6=0;
    if(z7==1) x7=1;
    else x7=0;
    if(z8==1) x8=1;
    else x8=0;
    if(z10==1) x10=1;
    else x10=0;
end
parameter S0=7'd0, S1=7'd1, S2=7'd2, S3=7'd3, S4=7'd4,
S5=7'd5, S6=7'd6, S7=7'd7, S8=7'd8, S9=7'd9,
S10=7'd10, S11=7'd11, S12=7'd12, S13=7'd13, S14=7'd14,
S15=7'd15, S16=7'd16, S17=7'd17, S18=7'd18, S19=7'd19,
S20=7'd20, S21=7'd21, S22=7'd22, S23=7'd23, S24=7'd24,
S25=7'd25, S26=7'd26, S27=7'd27, S28=7'd28, S29=7'd29,
S30=7'd30, S31=7'd31, S32=7'd32, S33=7'd33, S34=7'd34,
S35=7'd35;

always @(posedge clk) begin
 if (r) pstate <= S0; 
 else pstate <= nstate;
 rp <= rn;
end

always @(in or pstate) begin
case (pstate)
S0: casex(in)
  7'b0xxxxxx: begin nstate=S0; out =7'b0000000; end
  7'b10xxxx0: begin nstate=S1; out =7'b0011000; end
  7'b10xxxx1: begin nstate=S1; out =7'b0001000; end
  7'b11xxxx0: begin nstate=S11; out =7'b0011010; end
  7'b11xxxx1: begin nstate=S11; out =7'b0001010; end
  endcase
S1: casex(in)
  7'b100xxxx: begin nstate=S1; out =7'b0000000; end
  7'b101x1xx: begin nstate=S4; out =7'b1000000; end
  7'b101x0xx: begin nstate=S2; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S2: casex(in)
  7'b10xxxxx: begin nstate=S3; out =7'b0010000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S3: casex(in)
  7'b10xx0xx: begin nstate=S2; out =7'b1000000; end
  7'b10xx1xx: begin nstate=S4; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S4: casex(in)
  7'b10xxxxx: begin nstate=S5; out =7'b0010000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S5: casex(in)
  7'b10x1xxx: begin nstate=S4; out =7'b1010000; end
  7'b10xx1xx: begin nstate=S4; out =7'b1010000; end
  7'b10x00xx: begin nstate=S6; out =7'b0110010; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S6: casex(in)
  7'b10xxx0x: begin nstate=S6; out =7'b0110000; end
  7'b10xxx1x: begin nstate=S7; out =7'b0110000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S7: casex(in)
  7'b10xxxxx: begin nstate=S8; out =7'b0000010; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S8: casex(in)
  7'b10xxx0x: begin nstate=S8; out =7'b0000000; end
  7'b10xxx1x: begin nstate=S9; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S9: casex(in)
  7'b10xxxxx: begin nstate=S10; out =7'b0000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S10: casex(in)
  7'b1001xxx: begin nstate=S10; out =7'b0000000; end
  7'b10x01xx: begin nstate=S1; out =7'b0001000; end
  7'b10x00xx: begin nstate=S6; out =7'b0100010; end
  7'b1011xxx: begin nstate=S9; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S11: casex(in)
  7'b0xxxx0x: begin nstate=S11; out =7'b0010000; end
  7'b11xxx0x: begin nstate=S11; out =7'b0010000; end
  7'b0xxxx1x: begin nstate=S0; out =7'b0010000; end
  7'b10xxxxx: begin nstate=S1; out =7'b0010000; end
  7'b11xxx1x: begin nstate=S12; out =7'b0010100; end
  endcase
S12: casex(in)
  7'b11xxxxx: begin nstate=S12; out =7'b0010100; end
  7'b10xxxxx: begin nstate=S1; out =7'b0010000; end
  7'b0xxxxxx: begin nstate=S16; out =7'b0010010; end
  endcase
S13: casex(in)
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S14: casex(in)
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S15: casex(in)
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S16: casex(in)
  7'b11110xx: begin nstate=S17; out =7'b0000000; end
  7'b101x1xx: begin nstate=S26; out =7'b0000000; end
  endcase
S17: casex(in)
  7'b1110xxx: begin nstate=S19; out =7'b1000000; end
  7'b100xxxx: begin nstate=S25; out =7'b1000000; end
  7'b101xx1x: begin nstate=S25; out =7'b1000000; end
  endcase
S19: casex(in)
  7'b111xxxx: begin nstate=S20; out =7'b1100000; end
  7'b100xxxx: begin nstate=S25; out =7'b1100000; end
  7'b101xx1x: begin nstate=S25; out =7'b1100000; end
  endcase
S20: casex(in)
  7'b111xxxx: begin nstate=S21; out =7'b0010000; end
  7'b100xxxx: begin nstate=S25; out =7'b0010000; end
  7'b101xx1x: begin nstate=S25; out =7'b0010000; end
  endcase
S21: casex(in)
  7'b111x0xx: begin nstate=S22; out =7'b1010000; end
  7'b100xxxx: begin nstate=S25; out =7'b1010000; end
  7'b101x1xx: begin nstate=S25; out =7'b1010000; end
  endcase
S22: casex(in)
  7'b101x0xx: begin nstate=S23; out =7'b0110000; end
  7'b101x1xx: begin nstate=S24; out =7'b0110000; end
  7'b100xxxx: begin nstate=S25; out =7'b0110000; end
  endcase
S23: casex(in)
  7'b10xxxxx: begin nstate=S35; out =7'b1110000; end
  endcase
S24: casex(in)
  7'b10xxxxx: begin nstate=S35; out =7'b0001000; end
  endcase
S25: casex(in)
  7'b101x0xx: begin nstate=S18; out =7'b1001000; end
  7'b100xxxx: begin nstate=S18; out =7'b1001000; end
  endcase
S18: casex(in)
  7'b10xxxxx: begin nstate=S24; out =7'b0101000; end
  endcase
S26: casex(in)
  7'b101x1xx: begin nstate=S27; out =7'b1000100; end
  7'b100xxxx: begin nstate=S34; out =7'b1000100; end
  7'b101x0xx: begin nstate=S35; out =7'b1000100; end
  endcase
S27: casex(in)
  7'b101x1xx: begin nstate=S28; out =7'b0100100; end
  7'b100xxxx: begin nstate=S34; out =7'b0100100; end
  7'b101x0xx: begin nstate=S35; out =7'b0100100; end
  endcase
S28: casex(in)
  7'b101x1xx: begin nstate=S29; out =7'b1100100; end
  7'b101x0x0: begin nstate=S31; out =7'b1100101; end
  7'b101x0x1: begin nstate=S33; out =7'b1100100; end
  7'b100xxxx: begin nstate=S30; out =7'b1100100; end
  endcase
S29: casex(in)
  7'b101x0x0: begin nstate=S31; out =7'b0010100; end
  7'b101x0x1: begin nstate=S33; out =7'b0010100; end
  7'b100xxxx: begin nstate=S30; out =7'b0010100; end
  endcase
S31: casex(in)
  7'b101x0xx: begin nstate=S32; out =7'b0110100; end
  7'b101x1xx: begin nstate=S30; out =7'b0110100; end
  7'b100xxxx: begin nstate=S30; out =7'b0110100; end
  endcase
S32: casex(in)
  7'b10xxxxx: begin nstate=S35; out =7'b1110100; end
  endcase
S33: casex(in)
  7'b10xxxxx: begin nstate=S30; out =7'b0001100; end
  endcase
S30: casex(in)
  7'b101xxxx: begin nstate=S35; out =7'b1010100; end
  7'b100xxxx: begin nstate=S34; out =7'b1000100; end
  endcase
S35: casex(in)
  7'bxxxxxxx: begin nstate=S16; out =7'b0000010; end
  endcase
S34: casex(in)
  7'b111x0xx: begin nstate=S16; out =7'b0111110; end
  endcase
endcase
end

always @(posedge clk) begin
    p1<=n1;
    tp1<=tn1;
end

always @(in or p1) begin
    case (p1)
    2'b00: casex(in[6])
        1'b0: begin n1=2'b01; en1=1'b0; end
        1'b1: begin n1=2'b00; en1=1'b0; end
        endcase
    2'b01: casex(in[6])
        1'b0: begin n1=2'b01; en1=1'b0; end
        1'b1: case(PPI1)
            1'b0: begin n1=2'b10; en1=1'b0; end
            1'b1: begin n1=2'b11; en1=1'b1; end
            endcase
        endcase
    2'b10: casex(in[6])
        1'b0: begin n1=2'b01; en1=1'b0; end
        1'b1: begin n1=2'b10; en1=1'b0; end
        endcase
    2'b11: begin n1=2'b11; en1=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en1) begin
        if(count1==3'b111) begin
            count1<=count1;
        end
        else
            count1<=count1+1;
    end
    else begin
        count1<=0;
    end
end

always @(count1) begin
    if(count1>=3'b010) begin
        if(count1<=3'b100) //delaySecond: 5     bit: 3
            co1=1;
        else begin
            co1=0;
        end
    end
    else
        co1=0;
end

always @(out[1] or tp1 or co1) begin
    case (tp1)
    2'b00: casex(co1&en1)
        1'b0: begin tn1=2'b00; z1=0;end
        1'b1: begin tn1=2'b01; z1=0;end
        endcase
    2'b01: if(~co1) begin tn1=2'b01; z1=1;end
        else casex(out[1])
        1'b0: begin tn1=2'b10; z1=~co1;end
        1'b1: begin tn1=2'b01; z1=~co1;end
        endcase
    2'b10: if(~co1) begin tn1=2'b01; z1=1;end
        else casex(out[1])
        1'b0: begin tn1=2'b10; z1=~co1;end
        1'b1: begin tn1=2'b11; z1=0;end
        endcase
    2'b11: casex(out[1])
        1'b0: begin tn1=2'b11; z1=0;end
        1'b1: begin tn1=2'b11; z1=0;end
        endcase
    endcase
end

always @(posedge clk) begin
    p2<=n2;
    tp2<=tn2;
end

always @(in or p2) begin
    case (p2)
    2'b00: casex(in[5])
        1'b1: begin n2=2'b01; en2=1'b0; end
        1'b0: begin n2=2'b00; en2=1'b0; end
        endcase
    2'b01: casex(in[5])
        1'b1: begin n2=2'b01; en2=1'b0; end
        1'b0: case(PPI2)
            1'b0: begin n2=2'b10; en2=1'b0; end
            1'b1: begin n2=2'b11; en2=1'b1; end
            endcase
        endcase
    2'b10: casex(in[5])
        1'b1: begin n2=2'b01; en2=1'b0; end
        1'b0: begin n2=2'b10; en2=1'b0; end
        endcase
    2'b11: begin n2=2'b11; en2=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en2) begin
        if(count2==4'b1111) begin
            count2<=count2;
        end
        else
            count2<=count2+1;
    end
    else begin
        count2<=0;
    end
end

always @(count2) begin
    if(count2>=4'b0110) begin
        if(count2<=4'b1010) //delaySecond: 11     bit: 4
            co2=1;
        else begin
            co2=0;
        end
    end
    else
        co2=0;
end

always @(out[6] or tp2 or co2) begin
    case (tp2)
    2'b00: casex(co2&en2)
        1'b0: begin tn2=2'b00; z2=0;end
        1'b1: begin tn2=2'b01; z2=0;end
        endcase
    2'b01: if(~co2) begin tn2=2'b01; z2=1;end
        else casex(out[6])
        1'b0: begin tn2=2'b10; z2=~co2;end
        1'b1: begin tn2=2'b01; z2=~co2;end
        endcase
    2'b10: if(~co2) begin tn2=2'b01; z2=1;end
        else casex(out[6])
        1'b0: begin tn2=2'b10; z2=~co2;end
        1'b1: begin tn2=2'b11; z2=0;end
        endcase
    2'b11: casex(out[6])
        1'b0: begin tn2=2'b11; z2=0;end
        1'b1: begin tn2=2'b11; z2=0;end
        endcase
    endcase
end

always @(posedge clk) begin
    p3<=n3;
    tp3<=tn3;
end

always @(in or p3) begin
    case (p3)
    2'b00: casex(out[0])
        1'b1: begin n3=2'b01; en3=1'b0; end
        1'b0: begin n3=2'b00; en3=1'b0; end
        endcase
    2'b01: casex(out[0])
        1'b1: begin n3=2'b01; en3=1'b0; end
        1'b0: case(PPI3)
            1'b0: begin n3=2'b10; en3=1'b0; end
            1'b1: begin n3=2'b11; en3=1'b1; end
            endcase
        endcase
    2'b10: casex(out[0])
        1'b1: begin n3=2'b01; en3=1'b0; end
        1'b0: begin n3=2'b10; en3=1'b0; end
        endcase
    2'b11: begin n3=2'b11; en3=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en3) begin
        if(count3==6'b111111) begin
            count3<=count3;
        end
        else
            count3<=count3+1;
    end
    else begin
        count3<=0;
    end
end

always @(count3) begin
    if(count3>=6'b011101) begin
        if(count3<=6'b011111) //delaySecond: 32     bit: 6
            co3=1;
        else begin
            co3=0;
        end
    end
    else
        co3=0;
end

always @(out[5] or tp3 or co3) begin
    case (tp3)
    2'b00: casex(co3&en3)
        1'b0: begin tn3=2'b00; z3=0;end
        1'b1: begin tn3=2'b01; z3=0;end
        endcase
    2'b01: if(~co3) begin tn3=2'b01; z3=1;end
        else casex(out[5])
        1'b0: begin tn3=2'b10; z3=~co3;end
        1'b1: begin tn3=2'b01; z3=~co3;end
        endcase
    2'b10: if(~co3) begin tn3=2'b01; z3=1;end
        else casex(out[5])
        1'b0: begin tn3=2'b10; z3=~co3;end
        1'b1: begin tn3=2'b11; z3=0;end
        endcase
    2'b11: casex(out[5])
        1'b0: begin tn3=2'b11; z3=0;end
        1'b1: begin tn3=2'b11; z3=0;end
        endcase
    endcase
end

always @(posedge clk) begin
    p4<=n4;
    tp4<=tn4;
end

always @(in or p4) begin
    case (p4)
    2'b00: casex(out[0])
        1'b1: begin n4=2'b01; en4=1'b0; end
        1'b0: begin n4=2'b00; en4=1'b0; end
        endcase
    2'b01: casex(out[0])
        1'b1: begin n4=2'b01; en4=1'b0; end
        1'b0: case(PPI4)
            1'b0: begin n4=2'b10; en4=1'b0; end
            1'b1: begin n4=2'b11; en4=1'b1; end
            endcase
        endcase
    2'b10: casex(out[0])
        1'b1: begin n4=2'b01; en4=1'b0; end
        1'b0: begin n4=2'b10; en4=1'b0; end
        endcase
    2'b11: begin n4=2'b11; en4=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en4) begin
        if(count4==6'b111111) begin
            count4<=count4;
        end
        else
            count4<=count4+1;
    end
    else begin
        count4<=0;
    end
end

always @(count4) begin
    if(count4>=6'b011101) begin
        if(count4<=6'b011111) //delaySecond: 32     bit: 6
            co4=1;
        else begin
            co4=0;
        end
    end
    else
        co4=0;
end

always @(out[5] or tp4 or co4) begin
    case (tp4)
    2'b00: casex(co4&en4)
        1'b0: begin tn4=2'b00; z4=0;end
        1'b1: begin tn4=2'b01; z4=0;end
        endcase
    2'b01: if(~co4) begin tn4=2'b01; z4=1;end
        else casex(out[5])
        1'b0: begin tn4=2'b10; z4=~co4;end
        1'b1: begin tn4=2'b01; z4=~co4;end
        endcase
    2'b10: if(~co4) begin tn4=2'b01; z4=1;end
        else casex(out[5])
        1'b0: begin tn4=2'b10; z4=~co4;end
        1'b1: begin tn4=2'b11; z4=0;end
        endcase
    2'b11: casex(out[5])
        1'b0: begin tn4=2'b11; z4=0;end
        1'b1: begin tn4=2'b11; z4=0;end
        endcase
    endcase
end

always @(posedge clk) begin
    p5<=n5;
    tp5<=tn5;
end

always @(in or p5) begin
    case (p5)
    2'b00: casex(out[3])
        1'b0: begin n5=2'b01; en5=1'b0; end
        1'b1: begin n5=2'b00; en5=1'b0; end
        endcase
    2'b01: casex(out[3])
        1'b0: begin n5=2'b01; en5=1'b0; end
        1'b1: case(PPI5)
            1'b0: begin n5=2'b10; en5=1'b0; end
            1'b1: begin n5=2'b11; en5=1'b1; end
            endcase
        endcase
    2'b10: casex(out[3])
        1'b0: begin n5=2'b01; en5=1'b0; end
        1'b1: begin n5=2'b10; en5=1'b0; end
        endcase
    2'b11: begin n5=2'b11; en5=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en5) begin
        if(count5==3'b111) begin
            count5<=count5;
        end
        else
            count5<=count5+1;
    end
    else begin
        count5<=0;
    end
end

always @(count5) begin
    if(count5>=3'b000) begin
        if(count5<=3'b011) //delaySecond: 4     bit: 3
            co5=1;
        else begin
            co5=0;
        end
    end
    else
        co5=0;
end

always @(out[4] or tp5 or co5) begin
    case (tp5)
    2'b00: casex(co5&en5)
        1'b0: begin tn5=2'b00; z5=0;end
        1'b1: begin tn5=2'b01; z5=0;end
        endcase
    2'b01: if(~co5) begin tn5=2'b01; z5=1;end
        else casex(out[4])
        1'b0: begin tn5=2'b10; z5=~co5;end
        1'b1: begin tn5=2'b01; z5=~co5;end
        endcase
    2'b10: if(~co5) begin tn5=2'b01; z5=1;end
        else casex(out[4])
        1'b0: begin tn5=2'b10; z5=~co5;end
        1'b1: begin tn5=2'b11; z5=0;end
        endcase
    2'b11: casex(out[4])
        1'b0: begin tn5=2'b11; z5=0;end
        1'b1: begin tn5=2'b11; z5=0;end
        endcase
    endcase
end

always @(posedge clk) begin
    p6<=n6;
    tp6<=tn6;
end

always @(in or p6) begin
    case (p6)
    2'b00: casex(in[0])
        1'b0: begin n6=2'b01; en6=1'b0; end
        1'b1: begin n6=2'b00; en6=1'b0; end
        endcase
    2'b01: casex(in[0])
        1'b0: begin n6=2'b01; en6=1'b0; end
        1'b1: case(PPI6)
            1'b0: begin n6=2'b10; en6=1'b0; end
            1'b1: begin n6=2'b11; en6=1'b1; end
            endcase
        endcase
    2'b10: casex(in[0])
        1'b0: begin n6=2'b01; en6=1'b0; end
        1'b1: begin n6=2'b10; en6=1'b0; end
        endcase
    2'b11: begin n6=2'b11; en6=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en6) begin
        if(count6==5'b11111) begin
            count6<=count6;
        end
        else
            count6<=count6+1;
    end
    else begin
        count6<=0;
    end
end

always @(count6) begin
    if(count6>=5'b10011) begin
        if(count6<=5'b11010) //delaySecond: 27     bit: 5
            co6=1;
        else begin
            co6=0;
        end
    end
    else
        co6=0;
end

always @(out[2] or tp6 or co6) begin
    case (tp6)
    2'b00: casex(co6&en6)
        1'b0: begin tn6=2'b00; z6=0;end
        1'b1: begin tn6=2'b01; z6=0;end
        endcase
    2'b01: if(~co6) begin tn6=2'b01; z6=1;end
        else casex(out[2])
        1'b0: begin tn6=2'b10; z6=~co6;end
        1'b1: begin tn6=2'b01; z6=~co6;end
        endcase
    2'b10: if(~co6) begin tn6=2'b01; z6=1;end
        else casex(out[2])
        1'b0: begin tn6=2'b10; z6=~co6;end
        1'b1: begin tn6=2'b11; z6=0;end
        endcase
    2'b11: casex(out[2])
        1'b0: begin tn6=2'b11; z6=0;end
        1'b1: begin tn6=2'b11; z6=0;end
        endcase
    endcase
end

always @(posedge clk) begin
    p7<=n7;
    tp7<=tn7;
end

always @(in or p7) begin
    case (p7)
    2'b00: casex(out[0])
        1'b1: begin n7=2'b01; en7=1'b0; end
        1'b0: begin n7=2'b00; en7=1'b0; end
        endcase
    2'b01: casex(out[0])
        1'b1: begin n7=2'b01; en7=1'b0; end
        1'b0: case(PPI7)
            1'b0: begin n7=2'b10; en7=1'b0; end
            1'b1: begin n7=2'b11; en7=1'b1; end
            endcase
        endcase
    2'b10: casex(out[0])
        1'b1: begin n7=2'b01; en7=1'b0; end
        1'b0: begin n7=2'b10; en7=1'b0; end
        endcase
    2'b11: begin n7=2'b11; en7=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en7) begin
        if(count7==4'b1111) begin
            count7<=count7;
        end
        else
            count7<=count7+1;
    end
    else begin
        count7<=0;
    end
end

always @(count7) begin
    if(count7>=4'b1010) begin
        if(count7<=4'b1011) //delaySecond: 12     bit: 4
            co7=1;
        else begin
            co7=0;
        end
    end
    else
        co7=0;
end

always @(out[1] or tp7 or co7) begin
    case (tp7)
    2'b00: casex(co7&en7)
        1'b0: begin tn7=2'b00; z7=0;end
        1'b1: begin tn7=2'b01; z7=0;end
        endcase
    2'b01: if(~co7) begin tn7=2'b01; z7=1;end
        else casex(out[1])
        1'b0: begin tn7=2'b10; z7=~co7;end
        1'b1: begin tn7=2'b01; z7=~co7;end
        endcase
    2'b10: if(~co7) begin tn7=2'b01; z7=1;end
        else casex(out[1])
        1'b0: begin tn7=2'b10; z7=~co7;end
        1'b1: begin tn7=2'b11; z7=0;end
        endcase
    2'b11: casex(out[1])
        1'b0: begin tn7=2'b11; z7=0;end
        1'b1: begin tn7=2'b11; z7=0;end
        endcase
    endcase
end

always @(posedge clk) begin
    p8<=n8;
    tp8<=tn8;
end

always @(in or p8) begin
    case (p8)
    2'b00: casex(out[6])
        1'b1: begin n8=2'b01; en8=1'b0; end
        1'b0: begin n8=2'b00; en8=1'b0; end
        endcase
    2'b01: casex(out[6])
        1'b1: begin n8=2'b01; en8=1'b0; end
        1'b0: case(PPI8)
            1'b0: begin n8=2'b10; en8=1'b0; end
            1'b1: begin n8=2'b11; en8=1'b1; end
            endcase
        endcase
    2'b10: casex(out[6])
        1'b1: begin n8=2'b01; en8=1'b0; end
        1'b0: begin n8=2'b10; en8=1'b0; end
        endcase
    2'b11: begin n8=2'b11; en8=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en8) begin
        if(count8==3'b111) begin
            count8<=count8;
        end
        else
            count8<=count8+1;
    end
    else begin
        count8<=0;
    end
end

always @(count8) begin
    if(count8>=3'b100) begin
        if(count8<=3'b110) //delaySecond: 7     bit: 3
            co8=1;
        else begin
            co8=0;
        end
    end
    else
        co8=0;
end

always @(out[6] or tp8 or co8) begin
    case (tp8)
    2'b00: casex(co8&en8)
        1'b0: begin tn8=2'b00; z8=0;end
        1'b1: begin tn8=2'b01; z8=0;end
        endcase
    2'b01: if(~co8) begin tn8=2'b01; z8=1;end
        else casex(out[6])
        1'b1: begin tn8=2'b10; z8=~co8;end
        1'b0: begin tn8=2'b01; z8=~co8;end
        endcase
    2'b10: if(~co8) begin tn8=2'b01; z8=1;end
        else casex(out[6])
        1'b1: begin tn8=2'b10; z8=~co8;end
        1'b0: begin tn8=2'b11; z8=0;end
        endcase
    2'b11: casex(out[6])
        1'b0: begin tn8=2'b11; z8=0;end
        1'b1: begin tn8=2'b11; z8=0;end
        endcase
    endcase
end


always @(posedge clk) begin
    p10<=n10;
    tp10<=tn10;
end

always @(in or p10) begin
    case (p10)
    2'b00: casex(out[1])
        1'b1: begin n10=2'b01; en10=1'b0; end
        1'b0: begin n10=2'b00; en10=1'b0; end
        endcase
    2'b01: casex(out[1])
        1'b1: begin n10=2'b01; en10=1'b0; end
        1'b0: case(PPI10)
            1'b0: begin n10=2'b10; en10=1'b0; end
            1'b1: begin n10=2'b11; en10=1'b1; end
            endcase
        endcase
    2'b10: casex(out[1])
        1'b1: begin n10=2'b01; en10=1'b0; end
        1'b0: begin n10=2'b10; en10=1'b0; end
        endcase
    2'b11: begin n10=2'b11; en10=1'b1; end
    endcase
end

always @(posedge clk) begin
    if(en10) begin
        if(count10==4'b1111) begin
            count10<=count10;
        end
        else
            count10<=count10+1;
    end
    else begin
        count10<=0;
    end
end

always @(count10) begin
    if(count10>=4'b0010) begin
        if(count10<=4'b1010) //delaySecond: 11     bit: 4
            co10=1;
        else begin
            co10=0;
        end
    end
    else
        co10=0;
end

always @(out[2] or tp10 or co10) begin
    case (tp10)
    2'b00: casex(co10&en10)
        1'b0: begin tn10=2'b00; z10=0;end
        1'b1: begin tn10=2'b01; z10=0;end
        endcase
    2'b01: if(~co10) begin tn10=2'b01; z10=1;end
        else casex(out[2])
        1'b0: begin tn10=2'b10; z10=~co10;end
        1'b1: begin tn10=2'b01; z10=~co10;end
        endcase
    2'b10: if(~co10) begin tn10=2'b01; z10=1;end
        else casex(out[2])
        1'b0: begin tn10=2'b10; z10=~co10;end
        1'b1: begin tn10=2'b11; z10=0;end
        endcase
    2'b11: casex(out[2])
        1'b0: begin tn10=2'b11; z10=0;end
        1'b1: begin tn10=2'b11; z10=0;end
        endcase
    endcase
end

endmodule
