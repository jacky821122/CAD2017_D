module fsm(clk, rst, PPI1, PPI2, PPI3, PPI4, PPI5, PPI6, PPI7, PPI8, PPI9, PPI10, Z, in);
input clk, rst;
input [6:0] in;
wire [6:0] out;
reg [6:0] pstate, nstate;
reg last_tri_1, en1, en_n1; //Generated by [ TRIGGER ]
reg [2:0] count1; //Generated by [ COUNTER ]
reg last_res_1, detect1, detect_n1, clk_start1, clk_start_n1, co1; //Generated by [ DETECTOR ]
reg last_tri_2, en2, en_n2; //Generated by [ TRIGGER ]
reg [3:0] count2; //Generated by [ COUNTER ]
reg last_res_2, detect2, detect_n2, clk_start2, clk_start_n2, co2; //Generated by [ DETECTOR ]
reg last_tri_3, en3, en_n3; //Generated by [ TRIGGER ]
reg [5:0] count3; //Generated by [ COUNTER ]
reg last_res_3, detect3, detect_n3, clk_start3, clk_start_n3, co3; //Generated by [ DETECTOR ]
reg last_tri_4, en4, en_n4; //Generated by [ TRIGGER ]
reg [5:0] count4; //Generated by [ COUNTER ]
reg last_res_4, detect4, detect_n4, clk_start4, clk_start_n4, co4; //Generated by [ DETECTOR ]
reg last_tri_5, en5, en_n5; //Generated by [ TRIGGER ]
reg [2:0] count5; //Generated by [ COUNTER ]
reg last_res_5, detect5, detect_n5, clk_start5, clk_start_n5, co5; //Generated by [ DETECTOR ]
reg last_tri_6, en6, en_n6; //Generated by [ TRIGGER ]
reg [4:0] count6; //Generated by [ COUNTER ]
reg last_res_6, detect6, detect_n6, clk_start6, clk_start_n6, co6; //Generated by [ DETECTOR ]
reg last_tri_7, en7, en_n7; //Generated by [ TRIGGER ]
reg [3:0] count7; //Generated by [ COUNTER ]
reg last_res_7, detect7, detect_n7, clk_start7, clk_start_n7, co7; //Generated by [ DETECTOR ]
reg last_tri_8, en8, en_n8; //Generated by [ TRIGGER ]
reg [2:0] count8; //Generated by [ COUNTER ]
reg last_res_8, detect8, detect_n8, clk_start8, clk_start_n8, co8; //Generated by [ DETECTOR ]
reg last_tri_9, en9, en_n9; //Generated by [ TRIGGER ]
reg [2:0] count9; //Generated by [ COUNTER ]
reg last_res_9, detect9, detect_n9, clk_start9, clk_start_n9, co9; //Generated by [ DETECTOR ]
reg last_tri_10, en10, en_n10; //Generated by [ TRIGGER ]
reg [3:0] count10; //Generated by [ COUNTER ]
reg last_res_10, detect10, detect_n10, clk_start10, clk_start_n10, co10; //Generated by [ DETECTOR ]
input PPI1, PPI2, PPI3, PPI4, PPI5, PPI6, PPI7, PPI8, PPI9, PPI10;
wire z1, z2, z3, z4, z5, z6, z7, z8, z9, z10;
output Z;
assign  Z = z1 & z2 & z3 & z4 & z5 & z6 & z7 & z8 & z9 & z10;
parameter S0=7'd0, S1=7'd1, S2=7'd2, S3=7'd3, S4=7'd4,
S5=7'd5, S6=7'd6, S7=7'd7, S8=7'd8, S9=7'd9,
S10=7'd10, S11=7'd11, S12=7'd12, S13=7'd13, S14=7'd14,
S15=7'd15, S16=7'd16, S17=7'd17, S18=7'd18, S19=7'd19,
S20=7'd20, S21=7'd21, S22=7'd22, S23=7'd23, S24=7'd24,
S25=7'd25, S26=7'd26, S27=7'd27, S28=7'd28, S29=7'd29,
S30=7'd30, S31=7'd31, S32=7'd32, S33=7'd33, S34=7'd34,
S35=7'd35;

always @(posedge clk or posedge rst) begin
 if (rst) pstate <= S0; 
 else pstate <= nstate;
end

always @(posedge clk) begin
case (pstate)
S0: casex(in)
  7'b0xxxxxx: begin nstate=S0; out =7'b0000000; end
  7'b10xxxx0: begin nstate=S1; out =7'b0011000; end
  7'b10xxxx1: begin nstate=S1; out =7'b0001000; end
  7'b11xxxx0: begin nstate=S11; out =7'b0011010; end
  7'b11xxxx1: begin nstate=S11; out =7'b0001010; end
  endcase
S1: casex(in)
  7'b100xxxx: begin nstate=S1; out =7'b0000000; end
  7'b101x1xx: begin nstate=S4; out =7'b1000000; end
  7'b101x0xx: begin nstate=S2; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S2: casex(in)
  7'b10xxxxx: begin nstate=S3; out =7'b0010000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S3: casex(in)
  7'b10xx0xx: begin nstate=S2; out =7'b1000000; end
  7'b10xx1xx: begin nstate=S4; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S4: casex(in)
  7'b10xxxxx: begin nstate=S5; out =7'b0010000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S5: casex(in)
  7'b10x1xxx: begin nstate=S4; out =7'b1010000; end
  7'b10xx1xx: begin nstate=S4; out =7'b1010000; end
  7'b10x00xx: begin nstate=S6; out =7'b0110010; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S6: casex(in)
  7'b10xxx0x: begin nstate=S6; out =7'b0110000; end
  7'b10xxx1x: begin nstate=S7; out =7'b0110000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0010010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0010010; end
  endcase
S7: casex(in)
  7'b10xxxxx: begin nstate=S8; out =7'b0000010; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S8: casex(in)
  7'b10xxx0x: begin nstate=S8; out =7'b0000000; end
  7'b10xxx1x: begin nstate=S9; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S9: casex(in)
  7'b10xxxxx: begin nstate=S10; out =7'b0000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S10: casex(in)
  7'b1001xxx: begin nstate=S10; out =7'b0000000; end
  7'b10x01xx: begin nstate=S1; out =7'b0001000; end
  7'b10x00xx: begin nstate=S6; out =7'b0100010; end
  7'b1011xxx: begin nstate=S9; out =7'b1000000; end
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  7'b11xxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S11: casex(in)
  7'b0xxxx0x: begin nstate=S11; out =7'b0010000; end
  7'b11xxx0x: begin nstate=S11; out =7'b0010000; end
  7'b0xxxx1x: begin nstate=S0; out =7'b0010000; end
  7'b10xxxxx: begin nstate=S1; out =7'b0010000; end
  7'b11xxx1x: begin nstate=S12; out =7'b0010100; end
  endcase
S12: casex(in)
  7'b11xxxxx: begin nstate=S12; out =7'b0010100; end
  7'b10xxxxx: begin nstate=S1; out =7'b0010000; end
  7'b0xxxxxx: begin nstate=S16; out =7'b0010010; end
  endcase
S13: casex(in)
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S14: casex(in)
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S15: casex(in)
  7'b0xxxxxx: begin nstate=S11; out =7'b0000010; end
  endcase
S16: casex(in)
  7'b11110xx: begin nstate=S17; out =7'b0000000; end
  7'b101x1xx: begin nstate=S26; out =7'b0000000; end
  endcase
S17: casex(in)
  7'b1110xxx: begin nstate=S19; out =7'b1000000; end
  7'b100xxxx: begin nstate=S25; out =7'b1000000; end
  7'b101xx1x: begin nstate=S25; out =7'b1000000; end
  endcase
S19: casex(in)
  7'b111xxxx: begin nstate=S20; out =7'b1100000; end
  7'b100xxxx: begin nstate=S25; out =7'b1100000; end
  7'b101xx1x: begin nstate=S25; out =7'b1100000; end
  endcase
S20: casex(in)
  7'b111xxxx: begin nstate=S21; out =7'b0010000; end
  7'b100xxxx: begin nstate=S25; out =7'b0010000; end
  7'b101xx1x: begin nstate=S25; out =7'b0010000; end
  endcase
S21: casex(in)
  7'b111x0xx: begin nstate=S22; out =7'b1010000; end
  7'b100xxxx: begin nstate=S25; out =7'b1010000; end
  7'b101x1xx: begin nstate=S25; out =7'b1010000; end
  endcase
S22: casex(in)
  7'b101x0xx: begin nstate=S23; out =7'b0110000; end
  7'b101x1xx: begin nstate=S24; out =7'b0110000; end
  7'b100xxxx: begin nstate=S25; out =7'b0110000; end
  endcase
S23: casex(in)
  7'b10xxxxx: begin nstate=S35; out =7'b1110000; end
  endcase
S24: casex(in)
  7'b10xxxxx: begin nstate=S35; out =7'b0001000; end
  endcase
S25: casex(in)
  7'b101x0xx: begin nstate=S18; out =7'b1001000; end
  7'b100xxxx: begin nstate=S18; out =7'b1001000; end
  endcase
S18: casex(in)
  7'b10xxxxx: begin nstate=S24; out =7'b0101000; end
  endcase
S26: casex(in)
  7'b101x1xx: begin nstate=S27; out =7'b1000100; end
  7'b100xxxx: begin nstate=S34; out =7'b1000100; end
  7'b101x0xx: begin nstate=S35; out =7'b1000100; end
  endcase
S27: casex(in)
  7'b101x1xx: begin nstate=S28; out =7'b0100100; end
  7'b100xxxx: begin nstate=S34; out =7'b0100100; end
  7'b101x0xx: begin nstate=S35; out =7'b0100100; end
  endcase
S28: casex(in)
  7'b101x1xx: begin nstate=S29; out =7'b1100100; end
  7'b101x0x0: begin nstate=S31; out =7'b1100101; end
  7'b101x0x1: begin nstate=S33; out =7'b1100100; end
  7'b100xxxx: begin nstate=S30; out =7'b1100100; end
  endcase
S29: casex(in)
  7'b101x0x0: begin nstate=S31; out =7'b0010100; end
  7'b101x0x1: begin nstate=S33; out =7'b0010100; end
  7'b100xxxx: begin nstate=S30; out =7'b0010100; end
  endcase
S31: casex(in)
  7'b101x0xx: begin nstate=S32; out =7'b0110100; end
  7'b101x1xx: begin nstate=S30; out =7'b0110100; end
  7'b100xxxx: begin nstate=S30; out =7'b0110100; end
  endcase
S32: casex(in)
  7'b10xxxxx: begin nstate=S35; out =7'b1110100; end
  endcase
S33: casex(in)
  7'b10xxxxx: begin nstate=S30; out =7'b0001100; end
  endcase
S30: casex(in)
  7'b101xxxx: begin nstate=S35; out =7'b1010100; end
  7'b100xxxx: begin nstate=S34; out =7'b1000100; end
  endcase
S35: casex(in)
  7'bxxxxxxx: begin nstate=S16; out =7'b0000010; end
  endcase
S34: casex(in)
  7'b111x0xx: begin nstate=S16; out =7'b0111110; end
  endcase
endcase
end

always @(posedge clk or posedge rst) begin
    if(rst) begin en1 <= 0; last_tri_1 <= 0; end
    else begin
        en1 <= en_n1;
        last_tri_1 <= in[6];
    end
end

assign en_n1 = en1 | ((~last_tri_1 & in[6]) & PPI1);

always @(posedge clk) begin
    if(en_n1) begin
        if(count1==3'b111) begin
            count1<=count1;
        end
        else
            count1<=count1+1;
    end
    else begin
        count1<=0;
    end
end

always @(posedge clk) begin
    if(count1>=3'b010) begin
        if(count1<=3'b100) //delaySecond: 5     bit: 3
            co1=1;
        else begin
            co1=0;
        end
    end
    else
        co1=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_1 <= 0; detect1 <= 0; clk_start1 <= 0; end
    else
    begin
        last_res_1 <= out[1];
        if(co1) detect1<= detect_n1;
        else detect1<= detect1;
        clk_start1 <= clk_start_n1;
    end
end

assign detect_n1 = detect1 | (~last_res_1 & out[1]);
assign clk_start_n1 = clk_start1 | co1;
assign z1 = (~detect1 & (clk_start1 & ~co1));

always @(posedge clk or posedge rst) begin
    if(rst) begin en2 <= 0; last_tri_2 <= 0; end
    else begin
        en2 <= en_n2;
        last_tri_2 <= in[5];
    end
end

assign en_n2 = en2 | ((last_tri_2 & ~in[5]) & PPI2);

always @(posedge clk) begin
    if(en_n2) begin
        if(count2==4'b1111) begin
            count2<=count2;
        end
        else
            count2<=count2+1;
    end
    else begin
        count2<=0;
    end
end

always @(posedge clk) begin
    if(count2>=4'b0110) begin
        if(count2<=4'b1010) //delaySecond: 11     bit: 4
            co2=1;
        else begin
            co2=0;
        end
    end
    else
        co2=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_2 <= 0; detect2 <= 0; clk_start2 <= 0; end
    else
    begin
        last_res_2 <= out[6];
        if(co2) detect2<= detect_n2;
        else detect2<= detect2;
        clk_start2 <= clk_start_n2;
    end
end

assign detect_n2 = detect2 | (~last_res_2 & out[6]);
assign clk_start_n2 = clk_start2 | co2;
assign z2 = (~detect2 & (clk_start2 & ~co2));

always @(posedge clk or posedge rst) begin
    if(rst) begin en3 <= 0; last_tri_3 <= 0; end
    else begin
        en3 <= en_n3;
        last_tri_3 <= out[0];
    end
end

assign en_n3 = en3 | ((last_tri_3 & ~out[0]) & PPI3);

always @(posedge clk) begin
    if(en_n3) begin
        if(count3==6'b111111) begin
            count3<=count3;
        end
        else
            count3<=count3+1;
    end
    else begin
        count3<=0;
    end
end

always @(posedge clk) begin
    if(count3>=6'b011101) begin
        if(count3<=6'b011111) //delaySecond: 32     bit: 6
            co3=1;
        else begin
            co3=0;
        end
    end
    else
        co3=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_3 <= 0; detect3 <= 0; clk_start3 <= 0; end
    else
    begin
        last_res_3 <= out[5];
        if(co3) detect3<= detect_n3;
        else detect3<= detect3;
        clk_start3 <= clk_start_n3;
    end
end

assign detect_n3 = detect3 | (~last_res_3 & out[5]);
assign clk_start_n3 = clk_start3 | co3;
assign z3 = (~detect3 & (clk_start3 & ~co3));

always @(posedge clk or posedge rst) begin
    if(rst) begin en4 <= 0; last_tri_4 <= 0; end
    else begin
        en4 <= en_n4;
        last_tri_4 <= out[0];
    end
end

assign en_n4 = en4 | ((last_tri_4 & ~out[0]) & PPI4);

always @(posedge clk) begin
    if(en_n4) begin
        if(count4==6'b111111) begin
            count4<=count4;
        end
        else
            count4<=count4+1;
    end
    else begin
        count4<=0;
    end
end

always @(posedge clk) begin
    if(count4>=6'b011101) begin
        if(count4<=6'b011111) //delaySecond: 32     bit: 6
            co4=1;
        else begin
            co4=0;
        end
    end
    else
        co4=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_4 <= 0; detect4 <= 0; clk_start4 <= 0; end
    else
    begin
        last_res_4 <= out[5];
        if(co4) detect4<= detect_n4;
        else detect4<= detect4;
        clk_start4 <= clk_start_n4;
    end
end

assign detect_n4 = detect4 | (~last_res_4 & out[5]);
assign clk_start_n4 = clk_start4 | co4;
assign z4 = (~detect4 & (clk_start4 & ~co4));

always @(posedge clk or posedge rst) begin
    if(rst) begin en5 <= 0; last_tri_5 <= 0; end
    else begin
        en5 <= en_n5;
        last_tri_5 <= out[3];
    end
end

assign en_n5 = en5 | ((~last_tri_5 & out[3]) & PPI5);

always @(posedge clk) begin
    if(en_n5) begin
        if(count5==3'b111) begin
            count5<=count5;
        end
        else
            count5<=count5+1;
    end
    else begin
        count5<=0;
    end
end

always @(posedge clk) begin
    if(count5>=3'b000) begin
        if(count5<=3'b011) //delaySecond: 4     bit: 3
            co5=1;
        else begin
            co5=0;
        end
    end
    else
        co5=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_5 <= 0; detect5 <= 0; clk_start5 <= 0; end
    else
    begin
        last_res_5 <= out[4];
        if(co5) detect5<= detect_n5;
        else detect5<= detect5;
        clk_start5 <= clk_start_n5;
    end
end

assign detect_n5 = detect5 | (~last_res_5 & out[4]);
assign clk_start_n5 = clk_start5 | co5;
assign z5 = (~detect5 & (clk_start5 & ~co5));

always @(posedge clk or posedge rst) begin
    if(rst) begin en6 <= 0; last_tri_6 <= 0; end
    else begin
        en6 <= en_n6;
        last_tri_6 <= in[0];
    end
end

assign en_n6 = en6 | ((~last_tri_6 & in[0]) & PPI6);

always @(posedge clk) begin
    if(en_n6) begin
        if(count6==5'b11111) begin
            count6<=count6;
        end
        else
            count6<=count6+1;
    end
    else begin
        count6<=0;
    end
end

always @(posedge clk) begin
    if(count6>=5'b10011) begin
        if(count6<=5'b11010) //delaySecond: 27     bit: 5
            co6=1;
        else begin
            co6=0;
        end
    end
    else
        co6=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_6 <= 0; detect6 <= 0; clk_start6 <= 0; end
    else
    begin
        last_res_6 <= out[2];
        if(co6) detect6<= detect_n6;
        else detect6<= detect6;
        clk_start6 <= clk_start_n6;
    end
end

assign detect_n6 = detect6 | (~last_res_6 & out[2]);
assign clk_start_n6 = clk_start6 | co6;
assign z6 = (~detect6 & (clk_start6 & ~co6));

always @(posedge clk or posedge rst) begin
    if(rst) begin en7 <= 0; last_tri_7 <= 0; end
    else begin
        en7 <= en_n7;
        last_tri_7 <= out[0];
    end
end

assign en_n7 = en7 | ((last_tri_7 & ~out[0]) & PPI7);

always @(posedge clk) begin
    if(en_n7) begin
        if(count7==4'b1111) begin
            count7<=count7;
        end
        else
            count7<=count7+1;
    end
    else begin
        count7<=0;
    end
end

always @(posedge clk) begin
    if(count7>=4'b1010) begin
        if(count7<=4'b1011) //delaySecond: 12     bit: 4
            co7=1;
        else begin
            co7=0;
        end
    end
    else
        co7=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_7 <= 0; detect7 <= 0; clk_start7 <= 0; end
    else
    begin
        last_res_7 <= out[1];
        if(co7) detect7<= detect_n7;
        else detect7<= detect7;
        clk_start7 <= clk_start_n7;
    end
end

assign detect_n7 = detect7 | (~last_res_7 & out[1]);
assign clk_start_n7 = clk_start7 | co7;
assign z7 = (~detect7 & (clk_start7 & ~co7));

always @(posedge clk or posedge rst) begin
    if(rst) begin en8 <= 0; last_tri_8 <= 0; end
    else begin
        en8 <= en_n8;
        last_tri_8 <= out[6];
    end
end

assign en_n8 = en8 | ((last_tri_8 & ~out[6]) & PPI8);

always @(posedge clk) begin
    if(en_n8) begin
        if(count8==3'b111) begin
            count8<=count8;
        end
        else
            count8<=count8+1;
    end
    else begin
        count8<=0;
    end
end

always @(posedge clk) begin
    if(count8>=3'b100) begin
        if(count8<=3'b110) //delaySecond: 7     bit: 3
            co8=1;
        else begin
            co8=0;
        end
    end
    else
        co8=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_8 <= 0; detect8 <= 0; clk_start8 <= 0; end
    else
    begin
        last_res_8 <= out[6];
        if(co8) detect8<= detect_n8;
        else detect8<= detect8;
        clk_start8 <= clk_start_n8;
    end
end

assign detect_n8 = detect8 | (last_res_8 & ~out[6]);
assign clk_start_n8 = clk_start8 | co8;
assign z8 = (~detect8 & (clk_start8 & ~co8));

always @(posedge clk or posedge rst) begin
    if(rst) begin en9 <= 0; last_tri_9 <= 0; end
    else begin
        en9 <= en_n9;
        last_tri_9 <= out[0];
    end
end

assign en_n9 = en9 | ((~last_tri_9 & out[0]) & PPI9);

always @(posedge clk) begin
    if(en_n9) begin
        if(count9==3'b111) begin
            count9<=count9;
        end
        else
            count9<=count9+1;
    end
    else begin
        count9<=0;
    end
end

always @(posedge clk) begin
    if(count9>=3'b000) begin
        if(count9<=3'b110) //delaySecond: 7     bit: 3
            co9=1;
        else begin
            co9=0;
        end
    end
    else
        co9=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_9 <= 0; detect9 <= 0; clk_start9 <= 0; end
    else
    begin
        last_res_9 <= out[5];
        if(co9) detect9<= detect_n9;
        else detect9<= detect9;
        clk_start9 <= clk_start_n9;
    end
end

assign detect_n9 = detect9 | (last_res_9 & ~out[5]);
assign clk_start_n9 = clk_start9 | co9;
assign z9 = (~detect9 & (clk_start9 & ~co9));

always @(posedge clk or posedge rst) begin
    if(rst) begin en10 <= 0; last_tri_10 <= 0; end
    else begin
        en10 <= en_n10;
        last_tri_10 <= out[1];
    end
end

assign en_n10 = en10 | ((last_tri_10 & ~out[1]) & PPI10);

always @(posedge clk) begin
    if(en_n10) begin
        if(count10==4'b1111) begin
            count10<=count10;
        end
        else
            count10<=count10+1;
    end
    else begin
        count10<=0;
    end
end

always @(posedge clk) begin
    if(count10>=4'b0010) begin
        if(count10<=4'b1010) //delaySecond: 11     bit: 4
            co10=1;
        else begin
            co10=0;
        end
    end
    else
        co10=0;
end

always @(posedge clk or posedge rst) begin
    if(rst) begin last_res_10 <= 0; detect10 <= 0; clk_start10 <= 0; end
    else
    begin
        last_res_10 <= out[2];
        if(co10) detect10<= detect_n10;
        else detect10<= detect10;
        clk_start10 <= clk_start_n10;
    end
end

assign detect_n10 = detect10 | (~last_res_10 & out[2]);
assign clk_start_n10 = clk_start10 | co10;
assign z10 = (~detect10 & (clk_start10 & ~co10));

endmodule
